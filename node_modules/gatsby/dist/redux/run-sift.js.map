{"version":3,"sources":["../../src/redux/run-sift.js"],"names":["default","sift","require","prepareRegex","makeRe","toDottedFields","objectToDottedField","liftResolvedFields","createDbQueriesFromObject","prefixResolvedFields","dbQueryToSiftQuery","ensureIndexByTypedChain","getNodesByTypedChain","addResolvedNodes","getNode","siftGetNode","prepareQueryArgs","filterFields","Object","keys","reduce","acc","key","value","_","isPlainObject","getFilters","filters","map","isEqId","siftArgs","length","id","handleFirst","nodes","index","isEmpty","findIndex","$and","handleMany","result","filter","runFlatFiltersWithoutSift","nodeTypeNames","typedKeyValueIndexes","caches","getBucketsForFilters","undefined","sort","a","b","needles","pop","forEach","node","every","cache","has","push","path","chain","query","targetValue","nodesByKeyValue","runFilterAndSort","args","queryArgs","resolvedFields","firstOnly","stats","applyFilters","sortNodes","exports","runSift","filterStats","filterToStats","comparatorPath","join","comparatorsUsed","set","get","uniqueFilterPaths","add","filterPath","totalNonSingleFilters","filterWithoutSift","totalIndexHits","slice","filterWithSift","type","nestedQuery","concat","comparator","some","typeName","_runSiftOnNodes","f","runSiftOnNodes","siftFilter","$eq","internal","includes","dottedFields","dottedFieldKeys","sortFields","fields","field","startsWith","sortFns","v","sortOrder","order","toLowerCase","sortField","uniqueSorts","orderBy"],"mappings":"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","sourcesContent":["// @flow\nconst { default: sift } = require(`sift`)\nconst { prepareRegex } = require(`../utils/prepare-regex`)\nconst { makeRe } = require(`micromatch`)\nimport { getValueAt } from \"../utils/get-value-at\"\nimport _ from \"lodash\"\nconst {\n  toDottedFields,\n  objectToDottedField,\n  liftResolvedFields,\n  createDbQueriesFromObject,\n  prefixResolvedFields,\n  dbQueryToSiftQuery,\n} = require(`../db/common/query`)\nconst {\n  ensureIndexByTypedChain,\n  getNodesByTypedChain,\n  addResolvedNodes,\n  getNode: siftGetNode,\n} = require(`./nodes`)\n\n/////////////////////////////////////////////////////////////////////\n// Parse filter\n/////////////////////////////////////////////////////////////////////\n\nconst prepareQueryArgs = (filterFields = {}) =>\n  Object.keys(filterFields).reduce((acc, key) => {\n    const value = filterFields[key]\n    if (_.isPlainObject(value)) {\n      acc[key === `elemMatch` ? `$elemMatch` : key] = prepareQueryArgs(value)\n    } else {\n      switch (key) {\n        case `regex`:\n          acc[`$regex`] = prepareRegex(value)\n          break\n        case `glob`:\n          acc[`$regex`] = makeRe(value)\n          break\n        default:\n          acc[`$${key}`] = value\n      }\n    }\n    return acc\n  }, {})\n\nconst getFilters = filters =>\n  Object.keys(filters).map(key => {\n    return { [key]: filters[key] }\n  })\n\n/////////////////////////////////////////////////////////////////////\n// Run Sift\n/////////////////////////////////////////////////////////////////////\n\nfunction isEqId(siftArgs) {\n  // The `id` of each node is invariably unique. So if a query is doing id $eq(string) it can find only one node tops\n  return (\n    siftArgs.length > 0 &&\n    siftArgs[0].id &&\n    Object.keys(siftArgs[0].id).length === 1 &&\n    Object.keys(siftArgs[0].id)[0] === `$eq`\n  )\n}\n\nfunction handleFirst(siftArgs, nodes) {\n  if (nodes.length === 0) {\n    return []\n  }\n\n  const index = _.isEmpty(siftArgs)\n    ? 0\n    : nodes.findIndex(\n        sift({\n          $and: siftArgs,\n        })\n      )\n\n  if (index !== -1) {\n    return [nodes[index]]\n  } else {\n    return []\n  }\n}\n\nfunction handleMany(siftArgs, nodes) {\n  let result = _.isEmpty(siftArgs)\n    ? nodes\n    : nodes.filter(\n        sift({\n          $and: siftArgs,\n        })\n      )\n\n  return result?.length ? result : null\n}\n\n/**\n * Given the chain of a simple filter, return the set of nodes that pass the\n * filter. The chain should be a property chain leading to the property to\n * check, followed by the value to check against. Common example:\n *   `allThings(filter: { fields: { slug: { eq: $slug } } })`\n * Only nodes of given node types will be considered\n * A fast index is created if one doesn't exist yet so cold call is slower.\n * The empty result value is null if firstOnly is false, or else an empty array.\n *\n * @param {Array<DbQuery>} filters Resolved. (Should be checked by caller to exist)\n * @param {Array<string>} nodeTypeNames\n * @param {Map<string, Map<string | number | boolean, Set<IGatsbyNode>>>} typedKeyValueIndexes\n * @returns {Array<IGatsbyNode> | undefined}\n */\nconst runFlatFiltersWithoutSift = (\n  filters,\n  nodeTypeNames,\n  typedKeyValueIndexes\n) => {\n  const caches = getBucketsForFilters(\n    filters,\n    nodeTypeNames,\n    typedKeyValueIndexes\n  )\n\n  if (!caches) {\n    // Let Sift take over as fallback\n    return undefined\n  }\n\n  // Put smallest last (we'll pop it)\n  caches.sort((a, b) => b.length - a.length)\n  // Iterate on the set with the fewest elements and create the intersection\n  const needles = caches.pop()\n  // Take the intersection of the retrieved caches-by-value\n  const result = []\n\n  // This _can_ still be expensive but the set of nodes should be limited ...\n  needles.forEach(node => {\n    if (caches.every(cache => cache.has(node))) {\n      // Every cache set contained this node so keep it\n      result.push(node)\n    }\n  })\n\n  // TODO: do we cache this result? I'm not sure how likely it is to be reused\n  // Consider the case of {a: {eq: 5}, b: {eq: 10}}, do we cache the [5,10]\n  // case for all value pairs? How likely is that to ever be reused?\n\n  return result\n}\n\n/**\n * @param {Array<DbQuery>} filters\n * @param {Array<string>} nodeTypeNames\n * @param {Map<string, Map<string | number | boolean, Set<IGatsbyNode>>>} typedKeyValueIndexes\n * @returns {Array<Set<IGatsbyNode>> | undefined} Undefined means at least one\n *   cache was not found. Must fallback to sift.\n */\nconst getBucketsForFilters = (filters, nodeTypeNames, typedKeyValueIndexes) => {\n  const caches /*: Array<Map<string|number|boolean, Set<IGatsbyNode>>>*/ = []\n\n  // Fail fast while trying to create and get the value-cache for each path\n  let every = filters.every((filter /*: DbQuery*/) => {\n    let {\n      path: chain,\n      query: { value: targetValue },\n    } = filter\n\n    ensureIndexByTypedChain(chain, nodeTypeNames, typedKeyValueIndexes)\n\n    const nodesByKeyValue = getNodesByTypedChain(\n      chain,\n      targetValue,\n      nodeTypeNames,\n      typedKeyValueIndexes\n    )\n\n    // If we couldn't find the needle then maybe sift can, for example if the\n    // schema contained a proxy; `slug: String @proxy(from: \"slugInternal\")`\n    // There are also cases (and tests) where id exists with a different type\n    if (!nodesByKeyValue) {\n      return false\n    }\n\n    // In all other cases this must be a non-empty Set because the indexing\n    // mechanism does not create a Set unless there's a IGatsbyNode for it\n    caches.push(nodesByKeyValue)\n\n    return true\n  })\n\n  if (every) {\n    return caches\n  }\n\n  // \"failed at least one\"\n  return undefined\n}\n\n/**\n * Filters and sorts a list of nodes using mongodb-like syntax.\n *\n * @param args raw graphql query filter/sort as an object\n * @property {boolean | number | string} args.type gqlType. See build-node-types\n * @property {boolean} args.firstOnly true if you want to return only the first\n *   result found. This will return a collection of size 1. Not a single element\n * @property {{filter?: Object, sort?: Object} | undefined} args.queryArgs\n * @property {undefined | Map<string, Map<string | number | boolean, Set<IGatsbyNode>>>} args.typedKeyValueIndexes\n *   May be undefined. A cache of indexes where you can look up Nodes grouped\n *   by a key: `types.join(',')+'/'+filterPath.join('+')`, which yields a Map\n *   which holds a Set of Nodes for the value that the filter is trying to eq\n *   against. If the property is `id` then there is no Set, it's just the IGatsbyNode.\n *   This object lives in query/query-runner.js and is passed down runQuery\n * @returns Collection of results. Collection will be limited to 1\n *   if `firstOnly` is true\n */\nconst runFilterAndSort = (args: Object) => {\n  const {\n    queryArgs: { filter, sort } = { filter: {}, sort: {} },\n    resolvedFields = {},\n    firstOnly = false,\n    nodeTypeNames,\n    typedKeyValueIndexes,\n    stats,\n  } = args\n\n  const result = applyFilters(\n    filter,\n    firstOnly,\n    nodeTypeNames,\n    typedKeyValueIndexes,\n    resolvedFields,\n    stats\n  )\n\n  return sortNodes(result, sort, resolvedFields, stats)\n}\n\nexports.runSift = runFilterAndSort\n\n/**\n * Applies filter. First through a simple approach, which is much faster than\n * running sift, but not as versatile and correct. If no nodes were found then\n * it falls back to filtering through sift.\n *\n * @param {Array<DbQuery> | undefined} filterFields\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param {undefined | Map<string, Map<string | number | boolean, Set<IGatsbyNode>>>} typedKeyValueIndexes\n * @param resolvedFields\n * @returns {Array<IGatsbyNode> | undefined} Collection of results. Collection\n *   will be limited to 1 if `firstOnly` is true\n */\nconst applyFilters = (\n  filterFields,\n  firstOnly,\n  nodeTypeNames,\n  typedKeyValueIndexes,\n  resolvedFields,\n  stats\n) => {\n  const filters /*: Array<DbQuery>*/ = filterFields\n    ? prefixResolvedFields(\n        createDbQueriesFromObject(prepareQueryArgs(filterFields)),\n        resolvedFields\n      )\n    : []\n\n  if (stats) {\n    filters.forEach((filter /*: DbQuery*/) => {\n      const filterStats = filterToStats(filter)\n      const comparatorPath = filterStats.comparatorPath.join(`.`)\n      stats.comparatorsUsed.set(\n        comparatorPath,\n        (stats.comparatorsUsed.get(comparatorPath) || 0) + 1\n      )\n      stats.uniqueFilterPaths.add(filterStats.filterPath.join(`.`))\n    })\n    if (filters.length > 1) {\n      stats.totalNonSingleFilters++\n    }\n  }\n\n  const result = filterWithoutSift(filters, nodeTypeNames, typedKeyValueIndexes)\n  if (result) {\n    if (stats) {\n      stats.totalIndexHits++\n    }\n    if (firstOnly) {\n      return result.slice(0, 1)\n    }\n    return result\n  }\n\n  return filterWithSift(filters, firstOnly, nodeTypeNames, resolvedFields)\n}\n\nconst filterToStats = (\n  filter /*: DbQuery*/,\n  filterPath = [],\n  comparatorPath = []\n) => {\n  if (filter.type === `elemMatch`) {\n    return filterToStats(\n      filter.nestedQuery,\n      filterPath.concat(filter.path),\n      comparatorPath.concat([`elemMatch`])\n    )\n  } else {\n    return {\n      filterPath: filterPath.concat(filter.path),\n      comparatorPath: comparatorPath.concat(filter.query.comparator),\n    }\n  }\n}\n\n/**\n * Check if the filter is \"flat\" (single leaf) and an \"$eq\". If so, uses custom\n * indexes based on filter and types and returns any result it finds.\n * If conditions are not met or no nodes are found, returns undefined.\n *\n * @param {Array<DbQuery>} filters Resolved. (Should be checked by caller to exist)\n * @param {Array<string>} nodeTypeNames\n * @param {Map<string, Map<string | number | boolean, Set<IGatsbyNode>>>} typedKeyValueIndexes\n * @returns {Array|undefined} Collection of results\n */\nconst filterWithoutSift = (filters, nodeTypeNames, typedKeyValueIndexes) => {\n  // This can also be `$ne`, `$in` or any other grapqhl comparison op\n  if (\n    !typedKeyValueIndexes ||\n    filters.length === 0 || // TODO: we should special case this\n    filters.some(\n      filter => filter.type === `elemMatch` || filter.query.comparator !== `$eq`\n    )\n  ) {\n    return undefined\n  }\n\n  return runFlatFiltersWithoutSift(filters, nodeTypeNames, typedKeyValueIndexes)\n}\n\n// Not a public API\nexports.filterWithoutSift = filterWithoutSift\n\n/**\n * Use sift to apply filters\n *\n * @param {Array<DbQuery>} filters Resolved\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param resolvedFields\n * @returns {Array<IGatsbyNode> | undefined | null} Collection of results.\n *   Collection will be limited to 1 if `firstOnly` is true\n */\nconst filterWithSift = (filters, firstOnly, nodeTypeNames, resolvedFields) => {\n  let nodes /*: IGatsbyNode[]*/ = []\n  nodeTypeNames.forEach(typeName => addResolvedNodes(typeName, nodes))\n\n  return _runSiftOnNodes(\n    nodes,\n    filters.map(f => dbQueryToSiftQuery(f)),\n    firstOnly,\n    nodeTypeNames,\n    resolvedFields,\n    siftGetNode\n  )\n}\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n * Note: this entry point is used by GATSBY_DB_NODES=loki\n *\n * @param {Array<IGatsbyNode>} nodes Should be all nodes of given type(s)\n * @param args Legacy api arg, see _runSiftOnNodes\n * @param {?function(id: string): IGatsbyNode | undefined} getNode\n * @returns {Array<IGatsbyNode> | undefined | null} Collection of results.\n *   Collection will be limited to 1 if `firstOnly` is true\n */\nconst runSiftOnNodes = (nodes, args, getNode = siftGetNode) => {\n  const {\n    queryArgs: { filter } = { filter: {} },\n    firstOnly = false,\n    resolvedFields = {},\n    nodeTypeNames,\n  } = args\n\n  let siftFilter = getFilters(\n    liftResolvedFields(toDottedFields(prepareQueryArgs(filter)), resolvedFields)\n  )\n\n  return _runSiftOnNodes(\n    nodes,\n    siftFilter,\n    firstOnly,\n    nodeTypeNames,\n    resolvedFields,\n    getNode\n  )\n}\n\nexports.runSiftOnNodes = runSiftOnNodes\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n *\n * @param {Array<IGatsbyNode>} nodes Should be all nodes of given type(s)\n * @param {Array<DbQuery>} filters Resolved\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param resolvedFields\n * @param {function(id: string): IGatsbyNode | undefined} getNode Note: this is\n *   different for loki\n * @returns {Array<IGatsbyNode> | undefined | null} Collection of results.\n *   Collection will be limited to 1 if `firstOnly` is true\n */\nconst _runSiftOnNodes = (\n  nodes,\n  filters,\n  firstOnly,\n  nodeTypeNames,\n  resolvedFields,\n  getNode\n) => {\n  // If the the query for single node only has a filter for an \"id\"\n  // using \"eq\" operator, then we'll just grab that ID and return it.\n  if (isEqId(filters)) {\n    const node = getNode(filters[0].id.$eq)\n\n    if (\n      !node ||\n      (node.internal && !nodeTypeNames.includes(node.internal.type))\n    ) {\n      if (firstOnly) {\n        return []\n      }\n      return null\n    }\n\n    return [node]\n  }\n\n  if (firstOnly) {\n    return handleFirst(filters, nodes)\n  } else {\n    return handleMany(filters, nodes)\n  }\n}\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n *\n * @param {Array<IGatsbyNode> | undefined | null} nodes Pre-filtered list of nodes\n * @param {Object | undefined} sort Sorting arguments\n * @param resolvedFields\n * @returns {Array<IGatsbyNode> | undefined | null} Same as input, except sorted\n */\nconst sortNodes = (nodes, sort, resolvedFields, stats) => {\n  if (!sort || nodes?.length <= 1) {\n    return nodes\n  }\n\n  // create functions that return the item to compare on\n  const dottedFields = objectToDottedField(resolvedFields)\n  const dottedFieldKeys = Object.keys(dottedFields)\n  const sortFields = sort.fields.map(field => {\n    if (\n      dottedFields[field] ||\n      dottedFieldKeys.some(key => field.startsWith(key))\n    ) {\n      return `__gatsby_resolved.${field}`\n    } else {\n      return field\n    }\n  })\n  const sortFns = sortFields.map(field => v => getValueAt(v, field))\n  const sortOrder = sort.order.map(order => order.toLowerCase())\n\n  if (stats) {\n    sortFields.forEach(sortField => {\n      stats.uniqueSorts.add(sortField)\n    })\n  }\n\n  return _.orderBy(nodes, sortFns, sortOrder)\n}\n"],"file":"run-sift.js"}